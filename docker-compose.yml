version: '3.8'

services:
  # PostgreSQL with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: insurance_manager_postgres
    environment:
      POSTGRES_DB: insurance_manager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_dev_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    container_name: insurance_manager_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # DuckDB for analytics (using a persistent volume)
  duckdb:
    image: python:3.12-slim
    container_name: insurance_manager_duckdb
    volumes:
      - duckdb_data:/data/duckdb
      - ./analytics:/app/analytics
    working_dir: /app
    command: >
      sh -c "pip install duckdb==0.9.2 && 
             python -c 'import duckdb; print(\"DuckDB ready\")' && 
             tail -f /dev/null"
    environment:
      DUCKDB_DATABASE: /data/duckdb/insurance_manager.db

  # Backend FastAPI service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: insurance_manager_backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres_dev_password@postgres:5432/insurance_manager
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      DUCKDB_PATH: /data/duckdb/insurance_manager.db
      SECRET_KEY: dev_secret_key_change_in_production
      DEBUG: "true"
      PYTHONUNBUFFERED: 1
    ports:
      - "8000:8000"
    volumes:
      - ./core:/app/core
      - ./features:/app/features
      - ./api:/app/api
      - ./simulations:/app/simulations
      - ./config:/app/config
      - ./migrations:/app/migrations
      - duckdb_data:/data/duckdb
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python -m api.health_check &&
        alembic upgrade head &&
        uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Celery worker for async tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: insurance_manager_celery_worker
    environment:
      DATABASE_URL: postgresql://postgres:postgres_dev_password@postgres:5432/insurance_manager
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      DUCKDB_PATH: /data/duckdb/insurance_manager.db
      PYTHONUNBUFFERED: 1
    volumes:
      - ./core:/app/core
      - ./features:/app/features
      - ./api:/app/api
      - ./simulations:/app/simulations
      - ./config:/app/config
      - duckdb_data:/data/duckdb
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    command: celery -A core.celery_app worker --loglevel=info

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: insurance_manager_celery_beat
    environment:
      DATABASE_URL: postgresql://postgres:postgres_dev_password@postgres:5432/insurance_manager
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      PYTHONUNBUFFERED: 1
    volumes:
      - ./core:/app/core
      - ./features:/app/features
      - ./api:/app/api
      - ./config:/app/config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    command: celery -A core.celery_app beat --loglevel=info

  # Frontend Next.js service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: insurance_manager_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
      NEXT_PUBLIC_WS_URL: ws://localhost:8000/ws
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev

volumes:
  postgres_data:
    name: insurance_manager_postgres_data
  redis_data:
    name: insurance_manager_redis_data
  duckdb_data:
    name: insurance_manager_duckdb_data

networks:
  default:
    name: insurance_manager_network 