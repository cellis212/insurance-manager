"""Initial migration with core tables

Revision ID: 7920cbe92cd1
Revises:
Create Date: 2025-07-01 17:44:36.576854-04:00

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "7920cbe92cd1"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "game_configurations",
        sa.Column(
            "name",
            sa.String(length=255),
            nullable=False,
            comment="Human-readable name for this configuration",
        ),
        sa.Column(
            "version", sa.Integer(), nullable=False, comment="Sequential version number"
        ),
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            comment="Whether this is the currently active configuration",
        ),
        sa.Column(
            "valid_from",
            sa.DateTime(timezone=True),
            server_default="NOW()",
            nullable=False,
            comment="When this configuration becomes valid",
        ),
        sa.Column(
            "valid_until",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When this configuration expires (null for permanent)",
        ),
        sa.Column(
            "economic_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='Economic and market parameters:\n        {\n            "base_demand_multiplier": 1.0,\n            "price_elasticity": {"auto": -1.2, "home": -0.8, ...},\n            "cross_price_elasticity": 0.3,\n            "market_growth_rate": 0.03,\n            "inflation_rate": 0.02,\n            "interest_rates": {"risk_free": 0.03, "corporate": 0.05},\n            ...\n        }',
        ),
        sa.Column(
            "turn_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='Turn timing and processing parameters:\n        {\n            "turn_duration_days": 7,\n            "decision_deadline": "Sunday 23:59:59 EST",\n            "processing_start": "Monday 00:00:00 EST",\n            "max_processing_minutes": 900,\n            "late_submission_penalty": 0.05,\n            ...\n        }',
        ),
        sa.Column(
            "initial_values",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='Starting values for new companies:\n        {\n            "starting_capital": 5000000,\n            "home_state_discount": 0.5,\n            "initial_solvency_ratio": 3.0,\n            "base_expense_ratio": 0.25,\n            ...\n        }',
        ),
        sa.Column(
            "regulatory_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='Regulatory system parameters:\n        {\n            "categories": {\n                "strict": {"capital_multiplier": 1.5, "approval_weeks": 6},\n                "moderate": {"capital_multiplier": 1.2, "approval_weeks": 4},\n                "light": {"capital_multiplier": 1.0, "approval_weeks": 2}\n            },\n            "base_compliance_cost": 50000,\n            "audit_probability": 0.1,\n            ...\n        }',
        ),
        sa.Column(
            "employee_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='Employee system parameters:\n        {\n            "skill_ranges": {"min": 10, "max": 100},\n            "salary_formula": {"base": 100000, "skill_multiplier": 2000},\n            "productivity_curve": "logarithmic",\n            "hiring_pool_size": 5,\n            ...\n        }',
        ),
        sa.Column(
            "product_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='Product tier parameters:\n        {\n            "tiers": {\n                "basic": {"price_modifier": 0.8, "risk_selection": 1.3},\n                "standard": {"price_modifier": 1.0, "risk_selection": 1.0},\n                "premium": {"price_modifier": 1.3, "risk_selection": 0.9}\n            },\n            "switching_cost": 100000,\n            "switching_weeks": 2,\n            ...\n        }',
        ),
        sa.Column(
            "expansion_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='Geographic expansion parameters:\n        {\n            "base_expansion_cost": 500000,\n            "distance_multiplier_formula": "1 + (distance / 1000)",\n            "market_size_multiplier": true,\n            "approval_weeks_base": 4,\n            ...\n        }',
        ),
        sa.Column(
            "investment_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='Investment system parameters:\n        {\n            "asset_classes": ["stocks", "bonds", "real_estate", "alternatives"],\n            "return_models": {...},\n            "risk_correlation_matrix": [...],\n            "liquidity_premiums": {...},\n            "cfo_skill_noise_formula": "1 - (skill / 100)",\n            ...\n        }',
        ),
        sa.Column(
            "claims_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='Claims generation parameters:\n        {\n            "frequency_distributions": {...},\n            "severity_distributions": {...},\n            "catastrophe_probabilities": {...},\n            "adverse_selection_factors": {...},\n            ...\n        }',
        ),
        sa.Column(
            "miscellaneous_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Additional parameters not covered by other categories",
        ),
        sa.Column(
            "schema_version",
            sa.Integer(),
            nullable=False,
            comment="Version of the configuration schema",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_game_configurations")),
        sa.UniqueConstraint("version", name="uq_game_configuration_version"),
    )
    op.create_index(
        "ix_game_configuration_active",
        "game_configurations",
        ["is_active", "valid_from"],
        unique=False,
    )
    op.create_index(
        "ix_game_configuration_validity",
        "game_configurations",
        ["valid_from", "valid_until"],
        unique=False,
    )
    op.create_index(
        "uq_game_configuration_active",
        "game_configurations",
        ["is_active"],
        unique=True,
        postgresql_where="is_active = true",
    )
    op.create_table(
        "lines_of_business",
        sa.Column(
            "code",
            sa.String(length=20),
            nullable=False,
            comment="Short code for the line (e.g., 'AUTO', 'HOME')",
        ),
        sa.Column(
            "name",
            sa.String(length=100),
            nullable=False,
            comment="Full name of the line of business",
        ),
        sa.Column(
            "description",
            sa.String(length=500),
            nullable=True,
            comment="Description of what this line covers",
        ),
        sa.Column(
            "base_frequency",
            sa.Numeric(precision=8, scale=4),
            nullable=False,
            comment="Base claim frequency (claims per policy per year)",
        ),
        sa.Column(
            "base_severity",
            sa.Numeric(precision=12, scale=2),
            nullable=False,
            comment="Base claim severity (average claim amount)",
        ),
        sa.Column(
            "frequency_volatility",
            sa.Numeric(precision=5, scale=2),
            nullable=False,
            comment="Volatility of claim frequency (coefficient of variation)",
        ),
        sa.Column(
            "severity_volatility",
            sa.Numeric(precision=5, scale=2),
            nullable=False,
            comment="Volatility of claim severity (coefficient of variation)",
        ),
        sa.Column(
            "capital_requirement_multiplier",
            sa.Numeric(precision=5, scale=2),
            nullable=False,
            comment="Multiplier for capital requirements vs base",
        ),
        sa.Column(
            "regulatory_complexity",
            sa.String(length=20),
            nullable=False,
            comment="Regulatory complexity: 'low', 'medium', or 'high'",
        ),
        sa.Column(
            "market_characteristics",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Additional market data (competition, growth rate, etc.)",
        ),
        sa.Column(
            "catastrophe_exposed",
            sa.String(length=50),
            nullable=True,
            comment="Types of catastrophes this line is exposed to",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_lines_of_business")),
    )
    op.create_index(
        op.f("ix_lines_of_business_code"), "lines_of_business", ["code"], unique=True
    )
    op.create_table(
        "semesters",
        sa.Column(
            "name",
            sa.String(length=100),
            nullable=False,
            comment="Human-readable semester name (e.g., 'Fall 2024')",
        ),
        sa.Column(
            "code",
            sa.String(length=20),
            nullable=False,
            comment="Semester code (e.g., 'F24')",
        ),
        sa.Column(
            "start_date", sa.Date(), nullable=False, comment="First day of the semester"
        ),
        sa.Column(
            "end_date", sa.Date(), nullable=False, comment="Last day of the semester"
        ),
        sa.Column(
            "game_start_date",
            sa.Date(),
            nullable=False,
            comment="When the game actually starts (may be after semester start)",
        ),
        sa.Column(
            "game_end_date",
            sa.Date(),
            nullable=False,
            comment="When the game ends (may be before semester end)",
        ),
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            comment="Whether this is the currently active semester",
        ),
        sa.Column(
            "is_registration_open",
            sa.Boolean(),
            nullable=False,
            comment="Whether new users can register for this semester",
        ),
        sa.Column(
            "configuration",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Semester-specific game configuration and feature flags",
        ),
        sa.Column(
            "game_version",
            sa.String(length=20),
            nullable=False,
            comment="Game version running for this semester",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_semesters")),
        sa.UniqueConstraint("name", name=op.f("uq_semesters_name")),
    )
    op.create_index(op.f("ix_semesters_code"), "semesters", ["code"], unique=True)
    op.create_table(
        "states",
        sa.Column(
            "code",
            sa.CHAR(length=2),
            nullable=False,
            comment="Two-letter state code (e.g., 'NY', 'CA')",
        ),
        sa.Column(
            "name",
            sa.String(length=100),
            nullable=False,
            comment="Full state name (e.g., 'New York', 'California')",
        ),
        sa.Column(
            "regulatory_category",
            sa.String(length=20),
            nullable=False,
            comment="Regulatory strictness: 'strict', 'moderate', or 'light'",
        ),
        sa.Column(
            "base_expansion_cost",
            sa.Numeric(precision=12, scale=2),
            nullable=False,
            comment="Base cost to expand into this state",
        ),
        sa.Column(
            "market_size_multiplier",
            sa.Numeric(precision=5, scale=2),
            nullable=False,
            comment="Multiplier for market size relative to baseline",
        ),
        sa.Column(
            "population",
            sa.Numeric(precision=12, scale=0),
            nullable=True,
            comment="State population for market sizing",
        ),
        sa.Column(
            "additional_requirements",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="State-specific requirements and regulations",
        ),
        sa.Column(
            "market_data",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Additional market characteristics and statistics",
        ),
        sa.Column(
            "region",
            sa.String(length=50),
            nullable=True,
            comment="Geographic region (e.g., 'Northeast', 'Southwest')",
        ),
        sa.Column(
            "timezone",
            sa.String(length=50),
            nullable=True,
            comment="Primary timezone for the state",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_states")),
    )
    op.create_index(op.f("ix_states_code"), "states", ["code"], unique=True)
    op.create_table(
        "market_conditions",
        sa.Column(
            "semester_id",
            sa.UUID(),
            nullable=False,
            comment="Semester these conditions belong to",
        ),
        sa.Column(
            "turn_number",
            sa.Integer(),
            nullable=False,
            comment="Turn number within the semester",
        ),
        sa.Column(
            "state_id",
            sa.UUID(),
            nullable=False,
            comment="State these conditions apply to",
        ),
        sa.Column(
            "line_id",
            sa.UUID(),
            nullable=False,
            comment="Line of business these conditions apply to",
        ),
        sa.Column(
            "base_demand",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Base market demand in premium dollars",
        ),
        sa.Column(
            "price_elasticity",
            sa.Numeric(precision=5, scale=2),
            nullable=False,
            comment="Price elasticity of demand (typically negative)",
        ),
        sa.Column(
            "competitive_intensity",
            sa.Numeric(precision=5, scale=2),
            nullable=False,
            comment="Competition level affecting price sensitivity",
        ),
        sa.Column(
            "market_data",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Additional market factors: {growth_rate, seasonality, regulatory_changes, consumer_confidence}",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["line_id"],
            ["lines_of_business.id"],
            name=op.f("fk_market_conditions_line_id_lines_of_business"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["semester_id"],
            ["semesters.id"],
            name=op.f("fk_market_conditions_semester_id_semesters"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["state_id"],
            ["states.id"],
            name=op.f("fk_market_conditions_state_id_states"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_market_conditions")),
        sa.UniqueConstraint(
            "semester_id",
            "turn_number",
            "state_id",
            "line_id",
            name="uix_market_condition_unique",
        ),
    )
    op.create_index(
        op.f("ix_market_conditions_line_id"),
        "market_conditions",
        ["line_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_market_conditions_semester_id"),
        "market_conditions",
        ["semester_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_market_conditions_state_id"),
        "market_conditions",
        ["state_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_market_conditions_turn_number"),
        "market_conditions",
        ["turn_number"],
        unique=False,
    )
    op.create_table(
        "semester_configurations",
        sa.Column(
            "semester_id",
            sa.UUID(),
            nullable=False,
            comment="The semester this configuration applies to",
        ),
        sa.Column(
            "base_configuration_id",
            sa.UUID(),
            nullable=True,
            comment="Base GameConfiguration to inherit from",
        ),
        sa.Column(
            "economic_overrides",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Overrides for economic parameters",
        ),
        sa.Column(
            "turn_overrides",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Overrides for turn timing parameters",
        ),
        sa.Column(
            "initial_value_overrides",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Overrides for starting values",
        ),
        sa.Column(
            "regulatory_overrides",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Overrides for regulatory parameters",
        ),
        sa.Column(
            "employee_overrides",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Overrides for employee system parameters",
        ),
        sa.Column(
            "product_overrides",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Overrides for product tier parameters",
        ),
        sa.Column(
            "expansion_overrides",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Overrides for expansion parameters",
        ),
        sa.Column(
            "investment_overrides",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Overrides for investment system parameters",
        ),
        sa.Column(
            "claims_overrides",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Overrides for claims generation parameters",
        ),
        sa.Column(
            "miscellaneous_overrides",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Overrides for miscellaneous parameters",
        ),
        sa.Column(
            "feature_overrides",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='Feature flags specific to this semester:\n        {\n            "enable_advanced_investments": true,\n            "enable_middle_management": false,\n            "enable_custom_products": false,\n            "catastrophe_frequency_multiplier": 1.5,\n            ...\n        }',
        ),
        sa.Column(
            "custom_rules",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='Special rules or events for this semester:\n        {\n            "scheduled_catastrophes": [\n                {"turn": 5, "type": "hurricane", "states": ["FL", "TX"]},\n                ...\n            ],\n            "market_conditions": "recession",\n            "special_bonuses": {...},\n            ...\n        }',
        ),
        sa.Column(
            "experiment_config",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment='A/B testing or research experiment settings:\n        {\n            "experiment_name": "demand_elasticity_study",\n            "treatment_groups": [\n                {"group": "A", "company_ids": [...], "parameters": {...}},\n                {"group": "B", "company_ids": [...], "parameters": {...}}\n            ],\n            "metrics_to_track": ["profitability", "market_share", ...],\n            ...\n        }',
        ),
        sa.Column(
            "schema_version",
            sa.Integer(),
            nullable=False,
            comment="Version of the configuration schema",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["base_configuration_id"],
            ["game_configurations.id"],
            name=op.f(
                "fk_semester_configurations_base_configuration_id_game_configurations"
            ),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["semester_id"],
            ["semesters.id"],
            name=op.f("fk_semester_configurations_semester_id_semesters"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_semester_configurations")),
        sa.UniqueConstraint("semester_id", name="uq_semester_configuration_semester"),
    )
    op.create_index(
        "ix_semester_configuration_semester",
        "semester_configurations",
        ["semester_id"],
        unique=False,
    )
    op.create_table(
        "turns",
        sa.Column(
            "semester_id",
            sa.UUID(),
            nullable=False,
            comment="Semester this turn belongs to",
        ),
        sa.Column(
            "turn_number",
            sa.Integer(),
            nullable=False,
            comment="Sequential turn number within the semester (1-16)",
        ),
        sa.Column(
            "start_time",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="When this turn period begins",
        ),
        sa.Column(
            "end_time",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="Deadline for submitting decisions (Sunday midnight EST)",
        ),
        sa.Column(
            "processing_started_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When turn processing began",
        ),
        sa.Column(
            "processing_completed_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When turn processing finished",
        ),
        sa.Column(
            "status",
            sa.String(length=20),
            nullable=False,
            comment="Status: 'upcoming', 'active', 'processing', 'completed', 'failed'",
        ),
        sa.Column(
            "game_version",
            sa.String(length=20),
            nullable=False,
            comment="Game version for this turn's calculations",
        ),
        sa.Column(
            "special_rules",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Special events or rules for this turn (catastrophes, etc.)",
        ),
        sa.Column(
            "processing_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Statistics about turn processing (duration, errors, etc.)",
        ),
        sa.Column(
            "schema_version",
            sa.Integer(),
            nullable=False,
            comment="Schema version for JSONB fields",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["semester_id"],
            ["semesters.id"],
            name=op.f("fk_turns_semester_id_semesters"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_turns")),
    )
    op.create_index(
        op.f("ix_turns_semester_id"), "turns", ["semester_id"], unique=False
    )
    op.create_table(
        "users",
        sa.Column(
            "email",
            sa.String(length=255),
            nullable=False,
            comment="User's email address for login",
        ),
        sa.Column(
            "password_hash",
            sa.String(length=255),
            nullable=False,
            comment="Hashed password using bcrypt",
        ),
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            comment="Whether the user account is active",
        ),
        sa.Column(
            "is_verified",
            sa.Boolean(),
            nullable=False,
            comment="Whether the user has verified their email",
        ),
        sa.Column(
            "last_login",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="Timestamp of the user's last login",
        ),
        sa.Column(
            "preferences",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="User preferences (theme, notifications, etc.)",
        ),
        sa.Column(
            "feature_flags",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Feature flags for progressive rollout",
        ),
        sa.Column(
            "semester_id",
            sa.UUID(),
            nullable=True,
            comment="Current semester the user is participating in",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["semester_id"],
            ["semesters.id"],
            name=op.f("fk_users_semester_id_semesters"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(
        op.f("ix_users_semester_id"), "users", ["semester_id"], unique=False
    )
    op.create_table(
        "companies",
        sa.Column(
            "user_id", sa.UUID(), nullable=False, comment="Player who owns this company"
        ),
        sa.Column(
            "semester_id",
            sa.UUID(),
            nullable=False,
            comment="Semester this company belongs to",
        ),
        sa.Column(
            "name",
            sa.String(length=255),
            nullable=False,
            comment="Company name chosen by player",
        ),
        sa.Column(
            "home_state_id",
            sa.UUID(),
            nullable=False,
            comment="Home state based on player's alma mater",
        ),
        sa.Column(
            "founded_date",
            sa.Date(),
            nullable=False,
            comment="In-game date when company was founded",
        ),
        sa.Column(
            "current_capital",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Current available capital",
        ),
        sa.Column(
            "total_assets",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Total assets including investments",
        ),
        sa.Column(
            "total_liabilities",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Total liabilities including reserves",
        ),
        sa.Column(
            "solvency_ratio",
            sa.Numeric(precision=5, scale=2),
            nullable=True,
            comment="Assets / Liabilities ratio",
        ),
        sa.Column(
            "is_active",
            sa.String(length=20),
            nullable=False,
            comment="Status: 'active', 'bankrupt', 'liquidating'",
        ),
        sa.Column(
            "turn_number",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Current turn number for this company",
        ),
        sa.Column(
            "market_position",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Market share and ranking by state/line",
        ),
        sa.Column(
            "operational_data",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Operational metrics and KPIs",
        ),
        sa.Column(
            "schema_version",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Schema version for JSONB fields",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["home_state_id"],
            ["states.id"],
            name=op.f("fk_companies_home_state_id_states"),
        ),
        sa.ForeignKeyConstraint(
            ["semester_id"],
            ["semesters.id"],
            name=op.f("fk_companies_semester_id_semesters"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_companies_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_companies")),
    )
    op.create_index(
        op.f("ix_companies_semester_id"), "companies", ["semester_id"], unique=False
    )
    op.create_index(
        op.f("ix_companies_user_id"), "companies", ["user_id"], unique=False
    )
    op.create_table(
        "sessions",
        sa.Column(
            "user_id", sa.UUID(), nullable=False, comment="User this session belongs to"
        ),
        sa.Column(
            "token_hash",
            sa.String(length=255),
            nullable=False,
            comment="Hashed session token for security",
        ),
        sa.Column(
            "expires_at",
            sa.DateTime(timezone=True),
            nullable=False,
            comment="When this session expires",
        ),
        sa.Column(
            "ip_address",
            sa.String(length=45),
            nullable=True,
            comment="IP address of the session creation",
        ),
        sa.Column(
            "user_agent",
            sa.String(length=500),
            nullable=True,
            comment="User agent string from the browser",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_sessions_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_sessions")),
    )
    op.create_index(
        op.f("ix_sessions_expires_at"), "sessions", ["expires_at"], unique=False
    )
    op.create_index(
        op.f("ix_sessions_token_hash"), "sessions", ["token_hash"], unique=True
    )
    op.create_index(op.f("ix_sessions_user_id"), "sessions", ["user_id"], unique=False)
    op.create_table(
        "audit_logs",
        sa.Column(
            "entity_type",
            sa.Enum(
                "COMPANY",
                "COMPANY_FINANCIALS",
                "EMPLOYEE",
                "PRODUCT",
                "COMPANY_STATE_AUTH",
                "COMPANY_LINE_OF_BUSINESS",
                "TURN_DECISION",
                "TURN_RESULT",
                "CEO_ATTRIBUTES",
                "INVESTMENT_PORTFOLIO",
                name="auditedentity",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column("entity_id", sa.UUID(), nullable=False),
        sa.Column(
            "change_type",
            sa.Enum(
                "CREATE",
                "UPDATE",
                "DELETE",
                "BULK_UPDATE",
                name="changetype",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column("semester_id", sa.UUID(), nullable=False),
        sa.Column("changed_by_user_id", sa.UUID(), nullable=True),
        sa.Column("company_id", sa.UUID(), nullable=True),
        sa.Column(
            "changed_by_system",
            sa.String(length=100),
            server_default="api",
            nullable=False,
        ),
        sa.Column("change_reason", sa.String(length=500), nullable=True),
        sa.Column("old_values", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("new_values", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "changed_fields",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'[]'::jsonb"),
            nullable=False,
        ),
        sa.Column(
            "context_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=False,
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),

        sa.ForeignKeyConstraint(
            ["changed_by_user_id"],
            ["users.id"],
            name=op.f("fk_audit_logs_changed_by_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_audit_logs_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["semester_id"],
            ["semesters.id"],
            name=op.f("fk_audit_logs_semester_id_semesters"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_audit_logs")),
    )
    op.create_index(
        "idx_audit_logs_changed_fields",
        "audit_logs",
        ["changed_fields"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_audit_logs_company_created",
        "audit_logs",
        ["company_id", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_audit_logs_context_metadata",
        "audit_logs",
        ["context_metadata"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_audit_logs_entity_lookup",
        "audit_logs",
        ["entity_type", "entity_id", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_audit_logs_semester_entity",
        "audit_logs",
        ["semester_id", "entity_type", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_audit_logs_user_changes",
        "audit_logs",
        ["changed_by_user_id", "created_at"],
        unique=False,
    )
    op.create_table(
        "ceos",
        sa.Column(
            "company_id", sa.UUID(), nullable=False, comment="Company this CEO leads"
        ),
        sa.Column("name", sa.String(length=255), nullable=False, comment="CEO name"),
        sa.Column(
            "age",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="CEO age (35-40 start, retires at 65)",
        ),
        sa.Column(
            "hired_date", sa.Date(), nullable=False, comment="Date when CEO was hired"
        ),
        sa.Column(
            "leadership",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Universal 50% boost to all employees",
        ),
        sa.Column(
            "risk_intelligence",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Boosts underwriting and actuarial staff",
        ),
        sa.Column(
            "market_acumen",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Enhances marketing and sales teams",
        ),
        sa.Column(
            "regulatory_mastery",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Improves compliance and legal efficiency",
        ),
        sa.Column(
            "innovation_capacity",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Amplifies technology and R&D output",
        ),
        sa.Column(
            "deal_making",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Helps with M&A and reinsurance negotiations",
        ),
        sa.Column(
            "financial_expertise",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Boosts investment and financial analysis",
        ),
        sa.Column(
            "crisis_command",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Activates during catastrophes for claims/PR boost",
        ),
        sa.Column(
            "lifetime_profit",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Cumulative profit for milestone unlocks",
        ),
        sa.Column(
            "quarters_led",
            sa.Numeric(precision=4, scale=0),
            nullable=False,
            comment="Number of quarters as CEO",
        ),
        sa.Column(
            "achievements",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="[]",
            nullable=False,
            comment="List of unlocked achievements and milestones",
        ),
        sa.Column(
            "special_bonuses",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Active bonuses from events or milestones",
        ),
        sa.Column(
            "schema_version",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Schema version for JSONB fields",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_ceos_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ceos")),
    )
    op.create_index(op.f("ix_ceos_company_id"), "ceos", ["company_id"], unique=True)
    op.create_table(
        "company_lines_of_business",
        sa.Column(
            "company_id",
            sa.UUID(),
            nullable=False,
            comment="Company offering this line",
        ),
        sa.Column(
            "line_of_business_id",
            sa.UUID(),
            nullable=False,
            comment="Line of business being offered",
        ),
        sa.Column(
            "start_date",
            sa.Date(),
            nullable=False,
            comment="Date company started offering this line",
        ),
        sa.Column(
            "end_date",
            sa.Date(),
            nullable=True,
            comment="Date company stopped offering this line (if applicable)",
        ),
        sa.Column(
            "total_premium_written",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Total premiums written in this line",
        ),
        sa.Column(
            "total_premium_earned",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Total premiums earned in this line",
        ),
        sa.Column(
            "total_losses_paid",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Total losses paid in this line",
        ),
        sa.Column(
            "loss_ratio",
            sa.Numeric(precision=5, scale=2),
            nullable=True,
            comment="Losses / Earned Premium ratio",
        ),
        sa.Column(
            "combined_ratio",
            sa.Numeric(precision=5, scale=2),
            nullable=True,
            comment="(Losses + Expenses) / Earned Premium ratio",
        ),
        sa.Column(
            "policies_in_force",
            sa.Numeric(precision=10, scale=0),
            nullable=False,
            comment="Number of active policies",
        ),
        sa.Column(
            "average_premium",
            sa.Numeric(precision=10, scale=2),
            nullable=True,
            comment="Average premium per policy",
        ),
        sa.Column(
            "performance_metrics",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Additional performance metrics and KPIs",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_company_lines_of_business_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["line_of_business_id"],
            ["lines_of_business.id"],
            name=op.f(
                "fk_company_lines_of_business_line_of_business_id_lines_of_business"
            ),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_company_lines_of_business")),
        sa.UniqueConstraint(
            "company_id", "line_of_business_id", name="uq_company_line"
        ),
    )
    op.create_index(
        op.f("ix_company_lines_of_business_company_id"),
        "company_lines_of_business",
        ["company_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_company_lines_of_business_line_of_business_id"),
        "company_lines_of_business",
        ["line_of_business_id"],
        unique=False,
    )
    op.create_table(
        "company_state_authorizations",
        sa.Column(
            "company_id",
            sa.UUID(),
            nullable=False,
            comment="Company seeking authorization",
        ),
        sa.Column(
            "state_id", sa.UUID(), nullable=False, comment="State for authorization"
        ),
        sa.Column(
            "status",
            sa.String(length=20),
            nullable=False,
            comment="Status: 'pending', 'approved', 'suspended', 'revoked'",
        ),
        sa.Column(
            "application_date",
            sa.Date(),
            nullable=False,
            comment="Date authorization was requested",
        ),
        sa.Column(
            "approval_date",
            sa.Date(),
            nullable=True,
            comment="Date authorization was approved",
        ),
        sa.Column(
            "expected_approval_date",
            sa.Date(),
            nullable=True,
            comment="Expected approval date (4 weeks from application)",
        ),
        sa.Column(
            "is_compliant",
            sa.Boolean(),
            nullable=False,
            comment="Whether company is meeting state requirements",
        ),
        sa.Column(
            "compliance_score",
            sa.String(length=20),
            nullable=True,
            comment="Compliance rating: 'excellent', 'good', 'fair', 'poor'",
        ),
        sa.Column(
            "last_audit_date",
            sa.Date(),
            nullable=True,
            comment="Date of last regulatory audit",
        ),
        sa.Column(
            "is_home_state",
            sa.Boolean(),
            nullable=False,
            comment="Whether this is the company's home state",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_company_state_authorizations_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["state_id"],
            ["states.id"],
            name=op.f("fk_company_state_authorizations_state_id_states"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_company_state_authorizations")),
        sa.UniqueConstraint("company_id", "state_id", name="uq_company_state"),
    )
    op.create_index(
        op.f("ix_company_state_authorizations_company_id"),
        "company_state_authorizations",
        ["company_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_company_state_authorizations_state_id"),
        "company_state_authorizations",
        ["state_id"],
        unique=False,
    )
    op.create_table(
        "company_turn_decisions",
        sa.Column(
            "company_id",
            sa.UUID(),
            nullable=False,
            comment="Company making the decisions",
        ),
        sa.Column(
            "turn_id",
            sa.UUID(),
            nullable=False,
            comment="Turn these decisions apply to",
        ),
        sa.Column(
            "submitted_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When decisions were submitted (null = defaults applied)",
        ),
        sa.Column(
            "is_default",
            sa.Boolean(),
            nullable=False,
            comment="Whether these are system-generated 'no change' defaults",
        ),
        sa.Column(
            "decisions",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="All decisions for this turn (products, hiring, expansion, etc.)",
        ),
        sa.Column(
            "features_used",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="[]",
            nullable=False,
            comment="List of features used in this decision set",
        ),
        sa.Column(
            "validation_results",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Results of decision validation (warnings, errors)",
        ),
        sa.Column(
            "schema_version",
            sa.Integer(),
            nullable=False,
            comment="Schema version for JSONB fields",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_company_turn_decisions_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["turn_id"],
            ["turns.id"],
            name=op.f("fk_company_turn_decisions_turn_id_turns"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_company_turn_decisions")),
        sa.UniqueConstraint("company_id", "turn_id", name="uix_company_turn_decision"),
    )
    op.create_index(
        op.f("ix_company_turn_decisions_company_id"),
        "company_turn_decisions",
        ["company_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_company_turn_decisions_turn_id"),
        "company_turn_decisions",
        ["turn_id"],
        unique=False,
    )
    op.create_table(
        "company_turn_results",
        sa.Column(
            "company_id",
            sa.UUID(),
            nullable=False,
            comment="Company these results belong to",
        ),
        sa.Column(
            "turn_id", sa.UUID(), nullable=False, comment="Turn these results are for"
        ),
        sa.Column(
            "premiums_written",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Total premiums written this turn",
        ),
        sa.Column(
            "premiums_earned",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Premiums earned (pro-rata portion)",
        ),
        sa.Column(
            "claims_incurred",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Total claims incurred this turn",
        ),
        sa.Column(
            "claims_paid",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Claims actually paid out this turn",
        ),
        sa.Column(
            "operating_expenses",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Total operating expenses including salaries",
        ),
        sa.Column(
            "investment_income",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Income from investment portfolio",
        ),
        sa.Column(
            "net_income",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Net income for the turn",
        ),
        sa.Column(
            "ending_capital",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Capital balance at turn end",
        ),
        sa.Column(
            "loss_ratio",
            sa.Numeric(precision=5, scale=4),
            nullable=True,
            comment="Claims incurred / premiums earned",
        ),
        sa.Column(
            "expense_ratio",
            sa.Numeric(precision=5, scale=4),
            nullable=True,
            comment="Operating expenses / premiums written",
        ),
        sa.Column(
            "combined_ratio",
            sa.Numeric(precision=5, scale=4),
            nullable=True,
            comment="Loss ratio + expense ratio",
        ),
        sa.Column(
            "financial_details",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Detailed financial breakdown by line/state",
        ),
        sa.Column(
            "market_results",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Market share changes, competitor analysis",
        ),
        sa.Column(
            "operational_results",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Employee performance, efficiency metrics",
        ),
        sa.Column(
            "regulatory_results",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Compliance status, regulatory actions",
        ),
        sa.Column(
            "special_events",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Catastrophe impacts, market events",
        ),
        sa.Column(
            "result_schema_version",
            sa.Integer(),
            nullable=False,
            comment="Schema version for JSONB result fields",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_company_turn_results_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["turn_id"],
            ["turns.id"],
            name=op.f("fk_company_turn_results_turn_id_turns"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_company_turn_results")),
        sa.UniqueConstraint("company_id", "turn_id", name="uix_company_turn_result"),
    )
    op.create_index(
        op.f("ix_company_turn_results_company_id"),
        "company_turn_results",
        ["company_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_company_turn_results_turn_id"),
        "company_turn_results",
        ["turn_id"],
        unique=False,
    )
    op.create_table(
        "employees",
        sa.Column(
            "company_id",
            sa.UUID(),
            nullable=False,
            comment="Company employing this executive",
        ),
        sa.Column(
            "position",
            sa.String(length=50),
            nullable=False,
            comment="C-suite position (CUO, CFO, CMO, etc.)",
        ),
        sa.Column(
            "name", sa.String(length=255), nullable=False, comment="Executive's name"
        ),
        sa.Column(
            "skill_level",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Base skill level (1-100)",
        ),
        sa.Column(
            "base_salary",
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment="Annual salary requirement",
        ),
        sa.Column(
            "bonus_paid_ytd",
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment="Bonuses paid year-to-date",
        ),
        sa.Column(
            "special_bonus",
            sa.String(length=255),
            nullable=True,
            comment="Special ability like '+10% investment returns'",
        ),
        sa.Column(
            "special_bonus_details",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Detailed parameters for special bonus",
        ),
        sa.Column(
            "hire_date",
            sa.String(length=10),
            nullable=False,
            comment="Date hired (YYYY-MM-DD format)",
        ),
        sa.Column(
            "quarters_employed",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Number of quarters with company",
        ),
        sa.Column(
            "performance_history",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="[]",
            nullable=False,
            comment="Historical performance metrics",
        ),
        sa.Column(
            "schema_version",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Schema version for JSONB fields",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_employees_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_employees")),
    )
    op.create_index(
        op.f("ix_employees_company_id"), "employees", ["company_id"], unique=False
    )
    op.create_table(
        "feature_flags",
        sa.Column(
            "feature_key",
            sa.String(length=100),
            nullable=False,
            comment="Unique key identifying the feature",
        ),
        sa.Column(
            "scope",
            sa.Enum("global", "semester", "user", "company", name="feature_scope"),
            nullable=False,
            comment="Level at which this flag applies",
        ),
        sa.Column(
            "semester_id",
            sa.UUID(),
            nullable=True,
            comment="Semester ID when scope is 'semester'",
        ),
        sa.Column(
            "user_id", sa.UUID(), nullable=True, comment="User ID when scope is 'user'"
        ),
        sa.Column(
            "company_id",
            sa.UUID(),
            nullable=True,
            comment="Company ID when scope is 'company'",
        ),
        sa.Column(
            "enabled",
            sa.Boolean(),
            nullable=False,
            comment="Whether this feature is enabled",
        ),
        sa.Column(
            "description",
            sa.String(length=500),
            nullable=True,
            comment="Human-readable description of what this feature enables",
        ),
        sa.Column(
            "configuration",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Feature-specific configuration parameters",
        ),
        sa.Column(
            "rollout_percentage",
            sa.Integer(),
            nullable=False,
            comment="Percentage of entities that should see this feature (0-100)",
        ),
        sa.Column(
            "valid_from",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When this flag becomes active",
        ),
        sa.Column(
            "valid_until",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="When this flag expires (null for permanent)",
        ),
        sa.Column(
            "schema_version",
            sa.Integer(),
            nullable=False,
            comment="Version of the configuration schema",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.CheckConstraint(
            "\n            (scope = 'global' AND semester_id IS NULL AND user_id IS NULL AND company_id IS NULL) OR\n            (scope = 'semester' AND semester_id IS NOT NULL AND user_id IS NULL AND company_id IS NULL) OR\n            (scope = 'user' AND semester_id IS NULL AND user_id IS NOT NULL AND company_id IS NULL) OR\n            (scope = 'company' AND semester_id IS NULL AND user_id IS NULL AND company_id IS NOT NULL)\n            ",
            name=op.f("ck_feature_flags_ck_feature_flag_scope_consistency"),
        ),
        sa.CheckConstraint(
            "rollout_percentage >= 0 AND rollout_percentage <= 100",
            name=op.f("ck_feature_flags_ck_feature_flag_rollout_percentage"),
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_feature_flags_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["semester_id"],
            ["semesters.id"],
            name=op.f("fk_feature_flags_semester_id_semesters"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_feature_flags_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_feature_flags")),
        sa.UniqueConstraint(
            "feature_key",
            "scope",
            "semester_id",
            "user_id",
            "company_id",
            name="uq_feature_flag_scope",
        ),
    )
    op.create_index(
        "ix_feature_flag_lookup",
        "feature_flags",
        ["feature_key", "scope", "enabled"],
        unique=False,
    )
    op.create_index(
        "ix_feature_flag_validity",
        "feature_flags",
        ["valid_from", "valid_until"],
        unique=False,
    )
    op.create_table(
        "game_events",
        sa.Column("event_type", sa.String(length=100), nullable=False),
        sa.Column(
            "category",
            sa.Enum(
                "TURN_PROCESSING",
                "DECISION",
                "FINANCIAL",
                "REGULATORY",
                "EMPLOYEE",
                "PRODUCT",
                "EXPANSION",
                "INVESTMENT",
                "CATASTROPHE",
                "SYSTEM",
                "USER_ACTION",
                "ERROR",
                name="eventcategory",
                native_enum=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "severity",
            sa.Enum(
                "DEBUG",
                "INFO",
                "WARNING",
                "ERROR",
                "CRITICAL",
                name="eventseverity",
                native_enum=False,
            ),
            server_default="info",
            nullable=False,
        ),
        sa.Column("semester_id", sa.UUID(), nullable=False),
        sa.Column("turn_id", sa.UUID(), nullable=True),
        sa.Column("company_id", sa.UUID(), nullable=True),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.Column(
            "event_data",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=False,
        ),
        sa.Column(
            "context_data",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default=sa.text("'{}'::jsonb"),
            nullable=False,
        ),
        sa.Column(
            "triggered_by",
            sa.String(length=50),
            server_default="system",
            nullable=False,
        ),
        sa.Column("correlation_id", sa.UUID(), nullable=True),
        sa.Column(
            "is_processed",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_game_events_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["semester_id"],
            ["semesters.id"],
            name=op.f("fk_game_events_semester_id_semesters"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["turn_id"],
            ["turns.id"],
            name=op.f("fk_game_events_turn_id_turns"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_game_events_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_game_events")),
    )
    op.create_index(
        "idx_game_events_company_turn",
        "game_events",
        ["company_id", "turn_id"],
        unique=False,
    )
    op.create_index(
        "idx_game_events_correlation", "game_events", ["correlation_id"], unique=False
    )
    op.create_index(
        "idx_game_events_event_data",
        "game_events",
        ["event_data"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "idx_game_events_semester_created",
        "game_events",
        ["semester_id", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_game_events_type_severity",
        "game_events",
        ["event_type", "severity"],
        unique=False,
    )
    op.create_table(
        "investment_portfolios",
        sa.Column(
            "company_id",
            sa.UUID(),
            nullable=False,
            comment="Company owning this portfolio",
        ),
        sa.Column(
            "turn_id",
            sa.UUID(),
            nullable=False,
            comment="Turn this portfolio snapshot is from",
        ),
        sa.Column(
            "total_value",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Total portfolio value at turn end",
        ),
        sa.Column(
            "characteristics",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            comment="Actual portfolio characteristics: {risk: 0-100, duration: 0-20, liquidity: 0-100, credit: 0-100, diversification: 0-100}",
        ),
        sa.Column(
            "perceived_characteristics",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="What the CFO perceives: noise added based on skill level",
        ),
        sa.Column(
            "actual_returns",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Actual investment returns this turn",
        ),
        sa.Column(
            "perceived_returns",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="What the CFO reports as returns",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_investment_portfolios_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["turn_id"],
            ["turns.id"],
            name=op.f("fk_investment_portfolios_turn_id_turns"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_investment_portfolios")),
    )
    op.create_index(
        op.f("ix_investment_portfolios_company_id"),
        "investment_portfolios",
        ["company_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_investment_portfolios_turn_id"),
        "investment_portfolios",
        ["turn_id"],
        unique=False,
    )
    op.create_table(
        "liquidation_events",
        sa.Column(
            "company_id",
            sa.UUID(),
            nullable=False,
            comment="Company forced to liquidate assets",
        ),
        sa.Column(
            "turn_id",
            sa.UUID(),
            nullable=False,
            comment="Turn when liquidation occurred",
        ),
        sa.Column(
            "trigger_type",
            sa.String(length=50),
            nullable=False,
            comment="What triggered liquidation: catastrophe, operational_loss, regulatory_fine, capital_call",
        ),
        sa.Column(
            "required_amount",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Amount of cash needed",
        ),
        sa.Column(
            "assets_liquidated",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
            comment="List of assets sold: [{asset_class, amount, discount_applied, liquidity_score}]",
        ),
        sa.Column(
            "market_impact",
            sa.Numeric(precision=5, scale=2),
            nullable=False,
            comment="Additional discount due to market conditions (0.05 = 5%)",
        ),
        sa.Column(
            "total_cost",
            sa.Numeric(precision=15, scale=2),
            nullable=False,
            comment="Total cost of liquidation including all discounts",
        ),
        sa.Column(
            "cfo_skill_at_time",
            sa.Numeric(precision=3, scale=0),
            nullable=True,
            comment="CFO skill level when liquidation occurred (0-100)",
        ),
        sa.Column(
            "liquidation_metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Additional details: {time_pressure, alternative_sources_tried, regulatory_involvement}",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_liquidation_events_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["turn_id"],
            ["turns.id"],
            name=op.f("fk_liquidation_events_turn_id_turns"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_liquidation_events")),
    )
    op.create_index(
        op.f("ix_liquidation_events_company_id"),
        "liquidation_events",
        ["company_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_liquidation_events_turn_id"),
        "liquidation_events",
        ["turn_id"],
        unique=False,
    )
    op.create_table(
        "price_decisions",
        sa.Column(
            "company_id",
            sa.UUID(),
            nullable=False,
            comment="Company making this pricing decision",
        ),
        sa.Column(
            "turn_id",
            sa.UUID(),
            nullable=False,
            comment="Turn this decision applies to",
        ),
        sa.Column(
            "state_id",
            sa.UUID(),
            nullable=False,
            comment="State this pricing applies to",
        ),
        sa.Column(
            "line_id",
            sa.UUID(),
            nullable=False,
            comment="Line of business this pricing applies to",
        ),
        sa.Column(
            "base_price",
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment="Base premium price per policy",
        ),
        sa.Column(
            "price_multiplier",
            sa.Numeric(precision=5, scale=2),
            nullable=False,
            comment="Multiplier applied to base price (0.80 = 20% discount)",
        ),
        sa.Column(
            "expected_loss_ratio",
            sa.Numeric(precision=5, scale=2),
            nullable=False,
            comment="Expected loss ratio at this pricing level",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_price_decisions_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["line_id"],
            ["lines_of_business.id"],
            name=op.f("fk_price_decisions_line_id_lines_of_business"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["state_id"],
            ["states.id"],
            name=op.f("fk_price_decisions_state_id_states"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["turn_id"],
            ["turns.id"],
            name=op.f("fk_price_decisions_turn_id_turns"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_price_decisions")),
        sa.UniqueConstraint(
            "company_id",
            "turn_id",
            "state_id",
            "line_id",
            name="uix_price_decision_unique",
        ),
    )
    op.create_index(
        op.f("ix_price_decisions_company_id"),
        "price_decisions",
        ["company_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_price_decisions_line_id"), "price_decisions", ["line_id"], unique=False
    )
    op.create_index(
        op.f("ix_price_decisions_state_id"),
        "price_decisions",
        ["state_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_price_decisions_turn_id"), "price_decisions", ["turn_id"], unique=False
    )
    op.create_table(
        "products",
        sa.Column(
            "company_id",
            sa.UUID(),
            nullable=False,
            comment="Company offering this product",
        ),
        sa.Column(
            "state_id",
            sa.UUID(),
            nullable=False,
            comment="State where product is offered",
        ),
        sa.Column(
            "line_of_business_id",
            sa.UUID(),
            nullable=False,
            comment="Line of business for this product",
        ),
        sa.Column(
            "tier",
            sa.String(length=20),
            nullable=False,
            comment="Product tier: 'Basic', 'Standard', or 'Premium'",
        ),
        sa.Column(
            "base_premium",
            sa.Numeric(precision=12, scale=2),
            nullable=False,
            comment="Base annual premium before tier adjustments",
        ),
        sa.Column(
            "deductible",
            sa.Numeric(precision=10, scale=2),
            nullable=False,
            comment="Deductible amount for claims",
        ),
        sa.Column(
            "coverage_limit",
            sa.Numeric(precision=12, scale=2),
            nullable=False,
            comment="Maximum coverage amount per claim",
        ),
        sa.Column(
            "active_policies",
            sa.Numeric(precision=10, scale=0),
            nullable=False,
            comment="Number of active policies for this product",
        ),
        sa.Column(
            "market_share",
            sa.Numeric(precision=5, scale=4),
            nullable=True,
            comment="Market share in this state/line (0.1234 = 12.34%)",
        ),
        sa.Column(
            "selection_effect",
            sa.Numeric(precision=5, scale=2),
            nullable=False,
            comment="Risk selection multiplier from tier choice",
        ),
        sa.Column(
            "custom_config",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
            comment="Extensible configuration for future product features",
        ),
        sa.Column(
            "schema_version",
            sa.Numeric(precision=3, scale=0),
            nullable=False,
            comment="Schema version for custom_config field",
        ),
        sa.Column(
            "id", sa.UUID(), nullable=False, comment="Unique identifier for the record"
        ),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was created",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="Timestamp when the record was last updated",
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
            name=op.f("fk_products_company_id_companies"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["line_of_business_id"],
            ["lines_of_business.id"],
            name=op.f("fk_products_line_of_business_id_lines_of_business"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["state_id"],
            ["states.id"],
            name=op.f("fk_products_state_id_states"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_products")),
        sa.UniqueConstraint(
            "company_id",
            "state_id",
            "line_of_business_id",
            name="uq_one_product_per_company_state_line",
        ),
    )
    op.create_index(
        op.f("ix_products_company_id"), "products", ["company_id"], unique=False
    )
    op.create_index(
        op.f("ix_products_line_of_business_id"),
        "products",
        ["line_of_business_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_products_state_id"), "products", ["state_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_products_state_id"), table_name="products")
    op.drop_index(op.f("ix_products_line_of_business_id"), table_name="products")
    op.drop_index(op.f("ix_products_company_id"), table_name="products")
    op.drop_table("products")
    op.drop_index(op.f("ix_price_decisions_turn_id"), table_name="price_decisions")
    op.drop_index(op.f("ix_price_decisions_state_id"), table_name="price_decisions")
    op.drop_index(op.f("ix_price_decisions_line_id"), table_name="price_decisions")
    op.drop_index(op.f("ix_price_decisions_company_id"), table_name="price_decisions")
    op.drop_table("price_decisions")
    op.drop_index(
        op.f("ix_liquidation_events_turn_id"), table_name="liquidation_events"
    )
    op.drop_index(
        op.f("ix_liquidation_events_company_id"), table_name="liquidation_events"
    )
    op.drop_table("liquidation_events")
    op.drop_index(
        op.f("ix_investment_portfolios_turn_id"), table_name="investment_portfolios"
    )
    op.drop_index(
        op.f("ix_investment_portfolios_company_id"), table_name="investment_portfolios"
    )
    op.drop_table("investment_portfolios")
    op.drop_index("idx_game_events_type_severity", table_name="game_events")
    op.drop_index("idx_game_events_semester_created", table_name="game_events")
    op.drop_index(
        "idx_game_events_event_data", table_name="game_events", postgresql_using="gin"
    )
    op.drop_index("idx_game_events_correlation", table_name="game_events")
    op.drop_index("idx_game_events_company_turn", table_name="game_events")
    op.drop_table("game_events")
    op.drop_index("ix_feature_flag_validity", table_name="feature_flags")
    op.drop_index("ix_feature_flag_lookup", table_name="feature_flags")
    op.drop_table("feature_flags")
    op.drop_index(op.f("ix_employees_company_id"), table_name="employees")
    op.drop_table("employees")
    op.drop_index(
        op.f("ix_company_turn_results_turn_id"), table_name="company_turn_results"
    )
    op.drop_index(
        op.f("ix_company_turn_results_company_id"), table_name="company_turn_results"
    )
    op.drop_table("company_turn_results")
    op.drop_index(
        op.f("ix_company_turn_decisions_turn_id"), table_name="company_turn_decisions"
    )
    op.drop_index(
        op.f("ix_company_turn_decisions_company_id"),
        table_name="company_turn_decisions",
    )
    op.drop_table("company_turn_decisions")
    op.drop_index(
        op.f("ix_company_state_authorizations_state_id"),
        table_name="company_state_authorizations",
    )
    op.drop_index(
        op.f("ix_company_state_authorizations_company_id"),
        table_name="company_state_authorizations",
    )
    op.drop_table("company_state_authorizations")
    op.drop_index(
        op.f("ix_company_lines_of_business_line_of_business_id"),
        table_name="company_lines_of_business",
    )
    op.drop_index(
        op.f("ix_company_lines_of_business_company_id"),
        table_name="company_lines_of_business",
    )
    op.drop_table("company_lines_of_business")
    op.drop_index(op.f("ix_ceos_company_id"), table_name="ceos")
    op.drop_table("ceos")
    op.drop_index("idx_audit_logs_user_changes", table_name="audit_logs")
    op.drop_index("idx_audit_logs_semester_entity", table_name="audit_logs")
    op.drop_index("idx_audit_logs_entity_lookup", table_name="audit_logs")
    op.drop_index(
        "idx_audit_logs_context_metadata",
        table_name="audit_logs",
        postgresql_using="gin",
    )
    op.drop_index("idx_audit_logs_company_created", table_name="audit_logs")
    op.drop_index(
        "idx_audit_logs_changed_fields", table_name="audit_logs", postgresql_using="gin"
    )
    op.drop_table("audit_logs")
    op.drop_index(op.f("ix_sessions_user_id"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_token_hash"), table_name="sessions")
    op.drop_index(op.f("ix_sessions_expires_at"), table_name="sessions")
    op.drop_table("sessions")
    op.drop_index(op.f("ix_companies_user_id"), table_name="companies")
    op.drop_index(op.f("ix_companies_semester_id"), table_name="companies")
    op.drop_table("companies")
    op.drop_index(op.f("ix_users_semester_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_turns_semester_id"), table_name="turns")
    op.drop_table("turns")
    op.drop_index(
        "ix_semester_configuration_semester", table_name="semester_configurations"
    )
    op.drop_table("semester_configurations")
    op.drop_index(
        op.f("ix_market_conditions_turn_number"), table_name="market_conditions"
    )
    op.drop_index(op.f("ix_market_conditions_state_id"), table_name="market_conditions")
    op.drop_index(
        op.f("ix_market_conditions_semester_id"), table_name="market_conditions"
    )
    op.drop_index(op.f("ix_market_conditions_line_id"), table_name="market_conditions")
    op.drop_table("market_conditions")
    op.drop_index(op.f("ix_states_code"), table_name="states")
    op.drop_table("states")
    op.drop_index(op.f("ix_semesters_code"), table_name="semesters")
    op.drop_table("semesters")
    op.drop_index(op.f("ix_lines_of_business_code"), table_name="lines_of_business")
    op.drop_table("lines_of_business")
    op.drop_index(
        "uq_game_configuration_active",
        table_name="game_configurations",
        postgresql_where="is_active = true",
    )
    op.drop_index("ix_game_configuration_validity", table_name="game_configurations")
    op.drop_index("ix_game_configuration_active", table_name="game_configurations")
    op.drop_table("game_configurations")
    # ### end Alembic commands ###
